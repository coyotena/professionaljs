数组最多可以包含4 294 967 295 个项，这几乎已经能够满足任何编程需求了。
    如果想添加的项数超过这个上限值，就会发生异常。
    而创建一个初始化大小与这个上限值接近的数组，则可能会导致运行时间超长的脚本错误

数组类似栈的行为（末尾操作）
    push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。
    pop()方法则从数组移除最后一项，减少数组的length值，然后返回移除的项。

数组头部操作
    shift()方法能够移除数组中的第一项并返回该项，同时将数组长度减1
    unshift()方法能够在数组前端添加任意个项并返回新数组的长度

重排序方法
    reverse()方法会反转数组项的顺序
    sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。
        为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串

操作方法
    concat()方法可以基于当前数组中的所有项创建一个新数组。
        这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，然后返回新构建的数组。
        不会影响原始数组
    slice()方法能够基于当前数组中的一或多个项创建一个新数组。
        可以接受一或两个参数，即要返回项的起始和结束位置。
            如果slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置
            如果结束位置小于起始位置，返回空数组
        在只有一个参数的情况下，返回从该参数指定位置开始到当前数组末尾的所有项。
        如果有两个参数，返回起始和结束位置之间的项——但不包括结束位置的项。
        不会影响原始数组
    splice()方法，这个方法恐怕要算是最强大的数组方法了，它有很多种用法。
        splice()方法始终都会返回一个数组，该数组中包含从原始数组中删除的项（如果没有删除任何项，则返回一个空数组）
        最主要用途是向数组的中部插入项，但是用这种方法的方式有如下3中
        |--删除：可以删除任意数量的项，只需指定2个参数：要删除的第一项的位置和要删除的项数。
        |--插入：可以向指定位置插入任意数量的项，只需提供3个参数：起始位置、0（要删除的项数）和要插入的项。可以插入任意多个项。
        |--替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3个参数：起始位置、要删除的项数和要插入的任意数量的项。
            插入的项不必与删除的项相等

位置方法：indexOf()和lastIndexOf()
    这两个方法都接受两个参数：要查找的项和（可选的）表示查找起点位置的索引。
    indexOf()方法从数组的开头（位置0）开始向后查找：从左到右
    lastIndexOf()方法从数组的末尾开始向前查找。
    这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1.
    在比较第一个参数与数组中的每一项时，会使用全等操作符；也就是说，要求查找的项必须严格相等（就像 === -样）。
    ****如果第二个参数为负数，则加一次数组的长度为起始位置

迭代方法：
    ECMAScript5为数组定义了5个迭代方法。每个方法都接收两个参数：
        要在每一项上运行的函数和（可选的）运行该函数的作用域对象——影响this的值。
        传入这些方法中的函数会接收三个参数：数组项的值、该项在数组中的位置和数组对象本身(当前数组)。
        根据使用的方法不同，这个函数执行后的返回值可能会也可能不会影响访问的返回值。
        5个迭代方法：
            |--every():对数组的每一项运行给定的函数，如果该函数对每一项都返回true，则返回true。
            |--filter():对数组的每一项运行给定的函数，返回该函数会返回true的项组成的数组。
            |--forEach():对数组中的每一项运行给定函数。这个方法没有返回值。(只是执行，不影响原数组)
            |--map():对数组中的每一项运行给定的函数，返回每次函数调用的结果组成的数组。
            |--some():对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。
        以上方法都不会修改数组中的值

缩小方法：
    ECMAScript5新增了两个缩小数组的方法：reduce()和reduceRight()。
        这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。
        其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而reduceRight()则从数组的最后一项开始，向前遍历到第一项。
        这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为缩小基础的初始值。
        传给reduce()和reduceRight()的函数接收4个参数：
        前一个值、当前值、项的索引和数组对象。
        这个函数返回的任何值都会作为第一个参数自动传给下一项。
        第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。
    使用reduce()还是reduceRight()，主要取决于要从哪头开始遍历数组。除此之外，他们完全相同。


*********Date类型***************************************************************************************************************
Date.UTC()方法返回表示日期的毫秒数。参数分别是年份、基于0的月份（0-11）、月中的哪一天（1-31）、小时数（0-23）、分钟、秒以及毫秒数。
    这些参数中，只有前两个参数（年和月）是必需的。
    如果没有提供月中的天数，则假设为1；如果省略其他参数，则统统假设为0。
    Date构造函数会模仿Date.UTC()，它的日期和时间都基于本地时区而非GMT来创建。
    不过，Date构造函数接受的参数与Date.UTC()相同。
ECMAScript5添加了Date.now()方法，返回表示调用这个方法时的日期和时间毫秒数
    var start = Date.now();
    在不支持它的浏览器中，使用+操作符把Date对象转成字符串，也可以达到同样的目的
    var start = +new Date();

