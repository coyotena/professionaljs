typeof操作符可能返回下列某个字符串：
    "undefined"——如果这个值未定义
    "boolean"——如果这个值是布尔值
    "string"——如果这个值是字符串
    "number"——如果这个值是数值
    "object"——如果这个值是对象或null
    "function"——如果这个值是函数

不要测试某个特定的浮点数值：
    0.1加0.2的结果不是0.3，而是0.30000000000000004。这个小小的舍入误差会导致无法测试特定的浮点数值。
        例如：
        if ( a + b == 0.3) {//不要这样的测试
            console.log("you got o.3.");
        }

数值范围
    最小数：Number.MIN_VALUE    在大多数浏览器中，这个值是5e-324
    最大数：Number.MAX_VALUE    在大多数浏览器中，这个值是1.7976931348623157e+308
    如果某次计算的结果超出JavaScript数值范围的值，那么这个数值江北自动转换成特殊的Infinity值。
        如果这个数值是负数，转换成-Infinity（负无穷）
        如果这个数值是正数，转换成Infinity（正无穷）
        判断一个数值是不是有穷的，使用isFinite()函数

NaN，即非数值，这个数值用于表示一个本来要返回数值的操作数为返回数值的情况。
    NaN有两个非同寻常的特点：
        任何涉及NaN的操作都会返回NaN
        NaN与任何值都不相等，包括NaN本身
    判断一个数是否是“不是数值”。isNaN

数值转换
    有3个函数可以把非数值转换为数值：Number()、parseInt()、parseFloat()
        Number:即转型函数，可以用于任何数据类型，
        另外两个函数则专门用于把字符串转换成数值
        parseInt("字符串","基数");//基数：要转换的进制
        parseFloat("字符串");//没有第二个参数

Object类型：所具有的任何属性和方法存在于更具体的对象中。Object类型是所有其他实例（对象）的基础。
    Object的每个势力都具有下列属性和方法：
    constructor:保存着用于创建当前对象的函数;
    hasOwnProperty(propertyName):用于检查给定的属性在当前对象实例中（而不是在市里的原型中）是否存在。参数属性名必须以字符串形式指定
    isPrototypeOf(object):用于检查传入的对象是否是另一个对象的原型；
    propertyIsEnumerable(propertyName):用于检查给定的属性是否能够使用for-in语句来枚举。其中参数属性名也必须以字符串形式指定；
    toString():返回对象的字符串表示；
    valueOf():返回对象的字符串、数值或布尔值表示。通常与toString()方法的返回值相同

